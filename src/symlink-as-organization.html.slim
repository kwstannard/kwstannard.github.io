head
  link rel="stylesheet" href="monospace.css"

  css:
    html {
      background: var(--background-color-alt);
    }
    p {
      padding: 0.5em;
      border-left-style: outset;
      border-right-style: outset;
      border-radius: 0.6em;
      background: var(--background-color);
    }

    h1,h2,h3,h4 {
      padding: 0.6em;
      margin: 0.25em auto 0.25em auto;
      border-radius: 0.5em;
      width:fit-content;
      text-transform: initial;
      background: var(--background-color);
    }

  javascript:

    var dir = 1
    var scale = 1
    fun = function() {
      Object.values(document.getElementsByTagName("p")).forEach(function(par) {
        par.style.setProperty("transform", "rotate("+scale*dir+"deg)")
        dir = -1 * dir
        scale = scale - 0.05
      })
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", fun)
    } else {
      fun()
    }
    
body
  h1 Symlink as an Organizational Tool

  p
    |
      At most jobs you have many repositories. I like to clone them under ~/work.
      But, sometimes you have tasks that need to be performed only on repositories that
      your team owns. There are many ways to route a packet, but I settled on using
      symlinks and directories.

  p
    |
      I created a directory ~/team and added symlinks for my team repos to the repo.
      So, the team directory looked something like this:

  code
    pre
      |
        team/core -> ../work/core
        team/users -> ../work/users
        team/payments -> ../work/payments

  p
    |
      During my job search I have been putting perspective job notes into files. Then
      I realized I needed a quick way to know what jobs were still active. So, I
      created a ./current directory and added symlinks to the note files there.

  code
    pre
      |
        current/meta -> ../meta.txt
        current/apple -> ../apple.txt
        current/37signals -> ../37signals.txt

  p
    |
      Why is this nicer than some other organizational method? I like the way it allows
      quick access to a specific thing like a repo directory or a file. I don't need to
      think about a format because the format is the file system. In Ruby terms, it is
      kind of like a hash stored in a variable. The variable is the directory name and
      the value is the destination of the symlink.
